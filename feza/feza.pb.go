// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.11.3
// source: feza.proto

package feza

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Trade_Maker int32

const (
	Trade_Undefined Trade_Maker = 0
	Trade_Buyer     Trade_Maker = 1
	Trade_Seller    Trade_Maker = 2
)

// Enum value maps for Trade_Maker.
var (
	Trade_Maker_name = map[int32]string{
		0: "Undefined",
		1: "Buyer",
		2: "Seller",
	}
	Trade_Maker_value = map[string]int32{
		"Undefined": 0,
		"Buyer":     1,
		"Seller":    2,
	}
)

func (x Trade_Maker) Enum() *Trade_Maker {
	p := new(Trade_Maker)
	*p = x
	return p
}

func (x Trade_Maker) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trade_Maker) Descriptor() protoreflect.EnumDescriptor {
	return file_feza_proto_enumTypes[0].Descriptor()
}

func (Trade_Maker) Type() protoreflect.EnumType {
	return &file_feza_proto_enumTypes[0]
}

func (x Trade_Maker) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trade_Maker.Descriptor instead.
func (Trade_Maker) EnumDescriptor() ([]byte, []int) {
	return file_feza_proto_rawDescGZIP(), []int{0, 0}
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Maker     Trade_Maker `protobuf:"varint,2,opt,name=maker,proto3,enum=feza.Trade_Maker" json:"maker,omitempty"`
	Price     float64     `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	Quantity  float64     `protobuf:"fixed64,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Pair      string      `protobuf:"bytes,5,opt,name=pair,proto3" json:"pair,omitempty"`
	CreatedAt *Timestamp  `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feza_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_feza_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_feza_proto_rawDescGZIP(), []int{0}
}

func (x *Trade) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Trade) GetMaker() Trade_Maker {
	if x != nil {
		return x.Maker
	}
	return Trade_Undefined
}

func (x *Trade) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Trade) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Trade) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *Trade) GetCreatedAt() *Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Trades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trades []*Trade `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *Trades) Reset() {
	*x = Trades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feza_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trades) ProtoMessage() {}

func (x *Trades) ProtoReflect() protoreflect.Message {
	mi := &file_feza_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trades.ProtoReflect.Descriptor instead.
func (*Trades) Descriptor() ([]byte, []int) {
	return file_feza_proto_rawDescGZIP(), []int{1}
}

func (x *Trades) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

type TradesQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair  string `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Limit int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TradesQuery) Reset() {
	*x = TradesQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feza_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradesQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradesQuery) ProtoMessage() {}

func (x *TradesQuery) ProtoReflect() protoreflect.Message {
	mi := &file_feza_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradesQuery.ProtoReflect.Descriptor instead.
func (*TradesQuery) Descriptor() ([]byte, []int) {
	return file_feza_proto_rawDescGZIP(), []int{2}
}

func (x *TradesQuery) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *TradesQuery) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AskPrice    float64    `protobuf:"fixed64,1,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	AskQuantity float64    `protobuf:"fixed64,2,opt,name=ask_quantity,json=askQuantity,proto3" json:"ask_quantity,omitempty"`
	BidPrice    float64    `protobuf:"fixed64,3,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	BidQuantity float64    `protobuf:"fixed64,4,opt,name=bid_quantity,json=bidQuantity,proto3" json:"bid_quantity,omitempty"`
	Pair        string     `protobuf:"bytes,5,opt,name=pair,proto3" json:"pair,omitempty"`
	CreatedAt   *Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Quote) Reset() {
	*x = Quote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feza_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote) ProtoMessage() {}

func (x *Quote) ProtoReflect() protoreflect.Message {
	mi := &file_feza_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote.ProtoReflect.Descriptor instead.
func (*Quote) Descriptor() ([]byte, []int) {
	return file_feza_proto_rawDescGZIP(), []int{3}
}

func (x *Quote) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *Quote) GetAskQuantity() float64 {
	if x != nil {
		return x.AskQuantity
	}
	return 0
}

func (x *Quote) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *Quote) GetBidQuantity() float64 {
	if x != nil {
		return x.BidQuantity
	}
	return 0
}

func (x *Quote) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *Quote) GetCreatedAt() *Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Quotes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quotes []*Quote `protobuf:"bytes,1,rep,name=quotes,proto3" json:"quotes,omitempty"`
}

func (x *Quotes) Reset() {
	*x = Quotes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feza_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quotes) ProtoMessage() {}

func (x *Quotes) ProtoReflect() protoreflect.Message {
	mi := &file_feza_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quotes.ProtoReflect.Descriptor instead.
func (*Quotes) Descriptor() ([]byte, []int) {
	return file_feza_proto_rawDescGZIP(), []int{4}
}

func (x *Quotes) GetQuotes() []*Quote {
	if x != nil {
		return x.Quotes
	}
	return nil
}

type QuotesQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair  string `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Level int64  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Limit int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QuotesQuery) Reset() {
	*x = QuotesQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feza_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuotesQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotesQuery) ProtoMessage() {}

func (x *QuotesQuery) ProtoReflect() protoreflect.Message {
	mi := &file_feza_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotesQuery.ProtoReflect.Descriptor instead.
func (*QuotesQuery) Descriptor() ([]byte, []int) {
	return file_feza_proto_rawDescGZIP(), []int{5}
}

func (x *QuotesQuery) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *QuotesQuery) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *QuotesQuery) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seconds int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanos   int64 `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feza_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_feza_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_feza_proto_rawDescGZIP(), []int{6}
}

func (x *Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanos() int64 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

var File_feza_proto protoreflect.FileDescriptor

var file_feza_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x66, 0x65, 0x7a, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x66, 0x65,
	0x7a, 0x61, 0x22, 0xe5, 0x01, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x05,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x66, 0x65,
	0x7a, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x05,
	0x6d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x66, 0x65, 0x7a, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x2d, 0x0a, 0x05, 0x4d,
	0x61, 0x6b, 0x65, 0x72, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x75, 0x79, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x10, 0x02, 0x22, 0x2d, 0x0a, 0x06, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x66, 0x65, 0x7a, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x6b,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x64,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x62, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72,
	0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x66, 0x65, 0x7a, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x2d, 0x0a, 0x06, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x66, 0x65, 0x7a,
	0x61, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x22,
	0x4d, 0x0a, 0x0b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3b,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x32, 0x6a, 0x0a, 0x08, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x12, 0x11, 0x2e, 0x66, 0x65, 0x7a, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0c, 0x2e, 0x66, 0x65, 0x7a, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x30, 0x01, 0x12, 0x2e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x11, 0x2e, 0x66, 0x65, 0x7a, 0x61, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0c, 0x2e, 0x66, 0x65, 0x7a, 0x61, 0x2e, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x73, 0x30, 0x01, 0x42, 0x14, 0x5a, 0x12, 0x67, 0x6f, 0x2e, 0x66, 0x65,
	0x7a, 0x61, 0x2e, 0x69, 0x6f, 0x2f, 0x70, 0x62, 0x2f, 0x66, 0x65, 0x7a, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_feza_proto_rawDescOnce sync.Once
	file_feza_proto_rawDescData = file_feza_proto_rawDesc
)

func file_feza_proto_rawDescGZIP() []byte {
	file_feza_proto_rawDescOnce.Do(func() {
		file_feza_proto_rawDescData = protoimpl.X.CompressGZIP(file_feza_proto_rawDescData)
	})
	return file_feza_proto_rawDescData
}

var file_feza_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_feza_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_feza_proto_goTypes = []interface{}{
	(Trade_Maker)(0),    // 0: feza.Trade.Maker
	(*Trade)(nil),       // 1: feza.Trade
	(*Trades)(nil),      // 2: feza.Trades
	(*TradesQuery)(nil), // 3: feza.TradesQuery
	(*Quote)(nil),       // 4: feza.Quote
	(*Quotes)(nil),      // 5: feza.Quotes
	(*QuotesQuery)(nil), // 6: feza.QuotesQuery
	(*Timestamp)(nil),   // 7: feza.Timestamp
}
var file_feza_proto_depIdxs = []int32{
	0, // 0: feza.Trade.maker:type_name -> feza.Trade.Maker
	7, // 1: feza.Trade.created_at:type_name -> feza.Timestamp
	1, // 2: feza.Trades.trades:type_name -> feza.Trade
	7, // 3: feza.Quote.created_at:type_name -> feza.Timestamp
	4, // 4: feza.Quotes.quotes:type_name -> feza.Quote
	3, // 5: feza.Exchange.GetTrades:input_type -> feza.TradesQuery
	6, // 6: feza.Exchange.GetQuotes:input_type -> feza.QuotesQuery
	2, // 7: feza.Exchange.GetTrades:output_type -> feza.Trades
	5, // 8: feza.Exchange.GetQuotes:output_type -> feza.Quotes
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_feza_proto_init() }
func file_feza_proto_init() {
	if File_feza_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_feza_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feza_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feza_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradesQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feza_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feza_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quotes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feza_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuotesQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feza_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feza_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_feza_proto_goTypes,
		DependencyIndexes: file_feza_proto_depIdxs,
		EnumInfos:         file_feza_proto_enumTypes,
		MessageInfos:      file_feza_proto_msgTypes,
	}.Build()
	File_feza_proto = out.File
	file_feza_proto_rawDesc = nil
	file_feza_proto_goTypes = nil
	file_feza_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExchangeClient is the client API for Exchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExchangeClient interface {
	GetTrades(ctx context.Context, in *TradesQuery, opts ...grpc.CallOption) (Exchange_GetTradesClient, error)
	GetQuotes(ctx context.Context, in *QuotesQuery, opts ...grpc.CallOption) (Exchange_GetQuotesClient, error)
}

type exchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeClient(cc grpc.ClientConnInterface) ExchangeClient {
	return &exchangeClient{cc}
}

func (c *exchangeClient) GetTrades(ctx context.Context, in *TradesQuery, opts ...grpc.CallOption) (Exchange_GetTradesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Exchange_serviceDesc.Streams[0], "/feza.Exchange/GetTrades", opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeGetTradesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exchange_GetTradesClient interface {
	Recv() (*Trades, error)
	grpc.ClientStream
}

type exchangeGetTradesClient struct {
	grpc.ClientStream
}

func (x *exchangeGetTradesClient) Recv() (*Trades, error) {
	m := new(Trades)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exchangeClient) GetQuotes(ctx context.Context, in *QuotesQuery, opts ...grpc.CallOption) (Exchange_GetQuotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Exchange_serviceDesc.Streams[1], "/feza.Exchange/GetQuotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeGetQuotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exchange_GetQuotesClient interface {
	Recv() (*Quotes, error)
	grpc.ClientStream
}

type exchangeGetQuotesClient struct {
	grpc.ClientStream
}

func (x *exchangeGetQuotesClient) Recv() (*Quotes, error) {
	m := new(Quotes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExchangeServer is the server API for Exchange service.
type ExchangeServer interface {
	GetTrades(*TradesQuery, Exchange_GetTradesServer) error
	GetQuotes(*QuotesQuery, Exchange_GetQuotesServer) error
}

// UnimplementedExchangeServer can be embedded to have forward compatible implementations.
type UnimplementedExchangeServer struct {
}

func (*UnimplementedExchangeServer) GetTrades(*TradesQuery, Exchange_GetTradesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTrades not implemented")
}
func (*UnimplementedExchangeServer) GetQuotes(*QuotesQuery, Exchange_GetQuotesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetQuotes not implemented")
}

func RegisterExchangeServer(s *grpc.Server, srv ExchangeServer) {
	s.RegisterService(&_Exchange_serviceDesc, srv)
}

func _Exchange_GetTrades_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TradesQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExchangeServer).GetTrades(m, &exchangeGetTradesServer{stream})
}

type Exchange_GetTradesServer interface {
	Send(*Trades) error
	grpc.ServerStream
}

type exchangeGetTradesServer struct {
	grpc.ServerStream
}

func (x *exchangeGetTradesServer) Send(m *Trades) error {
	return x.ServerStream.SendMsg(m)
}

func _Exchange_GetQuotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuotesQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExchangeServer).GetQuotes(m, &exchangeGetQuotesServer{stream})
}

type Exchange_GetQuotesServer interface {
	Send(*Quotes) error
	grpc.ServerStream
}

type exchangeGetQuotesServer struct {
	grpc.ServerStream
}

func (x *exchangeGetQuotesServer) Send(m *Quotes) error {
	return x.ServerStream.SendMsg(m)
}

var _Exchange_serviceDesc = grpc.ServiceDesc{
	ServiceName: "feza.Exchange",
	HandlerType: (*ExchangeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTrades",
			Handler:       _Exchange_GetTrades_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetQuotes",
			Handler:       _Exchange_GetQuotes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "feza.proto",
}
